"use strict";(self["webpackChunkvue_cli"]=self["webpackChunkvue_cli"]||[]).push([[829],{5829:function(n,i,e){e.r(i),e.d(i,{default:function(){return c}});var t=function(){var n=this,i=n._self._c;return i("div",{attrs:{"page-index":""}},[i("div",{directives:[{name:"card",rawName:"v-card",value:750,expression:"750"}]},[i("p",[n._v("关于mixin")]),n._m(0)]),i("div",[i("p",[i("button",{attrs:{type:"button"},on:{click:n.message}},[n._v(" 调用mixin里的方法 ")])])])])},s=[function(){var n=this,i=n._self._c;return i("div",[i("pre",[n._v("提取组件的相同部分(代码)到一个js里实现复用\n例:\n  mixin.js->\n  export default {\n    methods: {\n        message() {\n            alert('Message')\n        }\n    }\n  }\n  Mixin.vue->\n  <template>\n  <div>\n    \x3c!-- 组件内部并没有声明message方法, 调用的是mixin.js里声明的函数 --\x3e\n    <button type=\"button\" @click=\"message\"/>\n  </div>\n  </template>\n\n  <script>\n  import mixin from '../mixin/index.js'\n\n  export default {\n    name: 'Mixin',\n    mixins: [mixin]\n  }\n  <\/script>\n杠:\n  q: mixin里可以写什么呢?\n  a: 正常vue里的配置项在混入里都可以配置, 如: methods, mounted...\n  q: 如果mixin里的配置和组件中的配置重复了怎么办?\n  a: 分情况\n     情况一: 若组件和混入都配置了data属性(函数), 并且含有相同的属性, 以组件为主混入为辅(混入会将数据整合)\n     情况二: 生命周期钩子来讲, 组件和混入里声明的钩子都会生效, 但会以混入为主(优先级高于组件内部声明的钩子)\n  q: 如何全局引入呢?\n  a: 在入口js文件中引入mixin并使用\n     app.js->\n     import mixin from './mixin'\n     Vue.mixin(mixin)\n  a: 这样你就能在任何组件中使用混入啦!\n                ")])])}],a={methods:{message(){alert("Message")}}},m={name:"Mixin",data(){return{}},mixins:[a]},r=m,u=e(1001),x=(0,u.Z)(r,t,s,!1,null,"852aa28e",null),c=x.exports}}]);
//# sourceMappingURL=829.2aaa9bbe.js.map