"use strict";(self["webpackChunkvue_cli"]=self["webpackChunkvue_cli"]||[]).push([[525],{2525:function(n,t,a){a.r(t),a.d(t,{default:function(){return c}});var e=function(){var n=this,t=n._self._c;return t("div",{attrs:{"page-index":""}},[t("div",{directives:[{name:"shadow",rawName:"v-shadow",value:{radius:8},expression:"{ radius: 8 }"}],staticStyle:{"margin-bottom":"1rem"}},[t("CustomEvent1Vue",{attrs:{parentGetChildrenData:n.getChildrenData}}),n._v(" 子组件数据: "+n._s(n.childrenData)+" ")],1),t("div",{directives:[{name:"shadow",rawName:"v-shadow",value:{radius:8},expression:"{ radius: 8 }"}],staticStyle:{"margin-bottom":"1rem"}},[t("CustomEvent1Vue",{attrs:{show:!1},on:{transmitData:n.transmitData}}),n._v(" 子组件数据: "+n._s(n.smitData)+" ")],1),t("div",{directives:[{name:"shadow",rawName:"v-shadow",value:{radius:8},expression:"{ radius: 8 }"}]},[t("CustomEvent1Vue",{ref:"childComponent",attrs:{show:!1}}),n._v(" 子组件数据: "+n._s(n.smitData)+" "),t("button",{attrs:{type:"button"},on:{click:n.getRef}},[n._v(" 获取 ")])],1),t("div",{directives:[{name:"card",rawName:"v-card",value:550,expression:"550"}]},[t("p",[n._v("父组件如何获取子组件中的数据呢?")]),n._m(0)])])},i=[function(){var n=this,t=n._self._c;return t("div",[t("pre",[n._v("例1:\n  通过props属性, 将一个方法传给子组件, 子组件接收后调用此函数并传递参数\n  父组件->\n  <div>\n    <ChildComponent :parentGetChildrenData=\"getChildrenData\" />\n    子组件数据: {childrenData}\n  <div/>\n  export default {\n    data() {\n        return {\n            childrenData: null\n        }\n    },\n    methods: {\n        getChildrenData(value) {\n            this.childrenData = value;\n        }\n    }\n  }\n  子组件->\n  <button @click=\"parentGetChildrenData(name)\"/>\n  export default {\n    props: ['parentGetChildrenData'],\n    data() {\n        return {\n            name: '小舞'\n        }\n    }\n  }\n例2:\n  通过$emit函数\n  父组件->\n  <div>\n    <ChildComponent @transmitData=\"transmitData\" />\n    子组件数据: {smitData}\n  <div/>\n  export default {\n    data() {\n        return {\n            smitData: null\n        }\n    },\n    methods: {\n        transmitData(value) {\n            this.smitData = value;\n        }\n    }\n  }\n  子组件->\n  <button @click=\"sendData\"/>\n  export default {\n    data() {\n        return {\n            name: '小舞'\n        }\n    },\n    methods: {\n        sendData() {\n            /**\n             * $emit函数接受两个参数\n             * param1: 调用的函数名称(与父组件@所绑定的事件名一致)\n             * param2: 传递的数据\n             */\n            this.$emit('transmitData', this.name)\n        }\n    }\n  }\n例3:\n  使用ref属性\n  父组件->\n  <div>\n    <ChildComponent ref=\"childComponent\" />\n    子组件数据: {smitData}\n  <div/>\n  export default {\n    data() {\n        return {\n            smitData: null\n        }\n    },\n    methods: {\n        transmitData(value) {\n            this.smitData = value;\n        }\n    },\n    mounted() {\n        // 当ref标识的组件(子)触发transmitData函数时回调此组件(父)transmitData函数\n        this.$refs.childComponent.$on('transmitData', this.transmitData)\n    }\n  }\n  子组件->\n  <button @click=\"sendData\"/>\n  export default {\n    data() {\n        return {\n            name: '小舞'\n        }\n    },\n    methods: {\n        sendData() {\n            this.$emit('transmitData', this.name)\n        }\n    }\n  }\n例4:\n  既然通过ref拿到了组件的实例, 为什么不直接获取子组件的值呢😎\n  父组件->\n  export default() {\n    methods: {\n        getChildrenData() {\n            this.$refs.childComponent.name\n        }\n    }\n  }\n扩:\n  $on方式灵活性更高, 可以做延迟操作, 仅触发一次操作等\n  ...\n  mounted() {\n    setTimeout(()=>{\n        this.$refs.childComponent.$on('transmitData', this.transmitData)\n    }, 3000)\n  }\n  ...\n  限定触发单次:\n    this.$refs.childComponent.$once('transmitData', this.transmitData)\n    or\n    在绑定事件时/@后使用once修饰符\n                ")])])}],s=function(){var n=this,t=n._self._c;return t("div",[n._v(" 我是子组件-"+n._s(Date.now())+" "),t("p",["all"!=n.show&&n.show?t("button",{attrs:{type:"button"},on:{click:function(t){return n.parentGetChildrenData(n.name)}}},[n._v(" 获取子组件数据 ")]):n._e(),"all"==n.show||n.show?n._e():t("button",{attrs:{type:"button"},on:{click:n.sendData}},[n._v(" 获取子组件数据($emit方式) ")])])])},r=[],o={name:"CustomEvent1",props:{parentGetChildrenData:Function,show:{default:!0}},data(){return{name:"小舞"}},methods:{sendData(){this.$emit("transmitData",this.name)},sendDataForRef(){return this.name}}},d=o,m=a(1001),l=(0,m.Z)(d,s,r,!1,null,"481eba84",null),u=l.exports,h={name:"ComponentCustomEvent",components:{CustomEvent1Vue:u},data(){return{childrenData:null,smitData:null}},methods:{getChildrenData(n){this.childrenData=n},transmitData(n){this.smitData=n},getRef(){this.$refs.childComponent.$on("transmitData",this.transmitData)}}},D=h,v=(0,m.Z)(D,e,i,!1,null,"0bd888bf",null),c=v.exports}}]);
//# sourceMappingURL=525.ed32850a.js.map